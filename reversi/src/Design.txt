Class Game:
    States:
        squares = 8x8 game board
            null = empty square
            "B" = black piece
            "W" = white piece
        turn = which player's turn it is
            "B" or "W"
        numBlack = # of black pieces on the board
        numWhite = # of white pieces on the board
        numRemainining = # of pieces remaining to be played
        lastPlay = coordinates of square of last piece played, e.g., [3,3]
    Functions:
        handleClick(row, col):
            Details explained at the very bottom of doc
        getCapturedPieces(row, col)
        processCapturedPieces(pieces)
        alternateTurn()
        render():



Class Board:
    Props:
        onClick = handleClick method from Game class
        lastPlay = index of square of last piece played
    Functions:
        renderSquare(row, col):
            row, col = 0-7
            Calls the Square function with props:
                value = value of this square - null, "B", or "W"
                onClick = handleClick function from Game class
                isLast = boolean of whether this square was the lastPlayed square
        render():
            returns <div> of all 64 squares

Global Functions:
    Square(props):
        Props:
            value = value of this square - null, "B", or "W"
            onClick = handleClick method from Game class
            isLast = true if this was the lastPlayed square

        Return:
            Button with className depending on value of that square,
            className also contains highlighted if isLast

    ScoreCount(props):
        Props:
            turn
            numBlack
            numWhite
        Return:
            Div containing score displays for black and white players
            
    RemainingCount(props):
        Props:
            numRemaining
        Return:
            Div containing # piece remaining display



Function handleClick(row, col):
    Function getCapturedPieces(row, col):
        each of the following functions returns an array of coordinates of captured pieces:
            getCapturedUp(row, col)
            getCapturedDown(row, col)
            getCapturedLeft(row, col)
            getCapturedRight(row, col)
            getCapturedUpLeft(row, col)
            getCapturedUpRight(row, col)
            getCapturedDownLeft(row, col)
            getCapturedDownRight(row, col)
        The above arrays of coordinates are merged into a single array
        If the merged array has no elements:
            - then this is an invalid move
        Else:
            - Add/subtract the number of captured pieces to/from the Score Displays
            - alternateTurn() = next player's turn
            - numRemaining -= 1

    How to check for captured[Direction]:
        1) Make sure the 1st piece in this direction is the opposite color
        2) Add index of each piece of opposite color to a return array
        2) Continue down this direction until you reach the same color piece or edge of board
            - If reached same color piece:
                - Return the array of indexes
            - Else, reached border:
                - Return empty array

            